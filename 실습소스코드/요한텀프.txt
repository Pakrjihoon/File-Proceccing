#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define REC_SIZE sizeof(struct person)
#define NAME_SIZE 5
#define SEQ_BLOCK 18
#define NODE_BLOCK 14

// 노드의 구조
struct TreeNode {
   int key;
   int record;
   int left;
   int right;
};
//입력 구조
struct person {
   int id;
   char name[NAME_SIZE];
   int age;
};
//person타입 변수 선언
struct person per;

//함수
void menu();
void insert();
void search();
void change();
void print();
void erase();
int node_height(int val);
int get_balance(int val);
void balance(int val);
void LL(int val);
void RR(int val);

//파일 포인터
FILE *fp_node;//트리 파일 포인터
FILE *fp_seq;//시퀀셜 파일 포인터

// 이진 탐색 트리 프로그램 
void main()
{
   char command;
   int  key;

   // 파일을 읽기/쓰기 모드로 연다.(w+ 모드는 기존 내용을 지워버리므로 반드시 r+모드로..)
   // 그러나 r+모드는 화일이 존재하지 않을 경우 화일을 만들지 못하므로 다음과 같이 만들어준다. 
   if ((fp_seq = fopen("sequential.txt", "r+")) == NULL) {
      fp_seq = fopen("sequential.txt", "w");
      fseek(fp_seq, 0, SEEK_SET);
      fprintf(fp_seq, "%03d %5s %03d %2d\n", 000, "_____", 000, -1); // 초기화
      fclose(fp_seq);
      fprintf(stderr, "sequential.txt 화일이 존재하지 않아 새로 만들었습니다.\n");
   }
   // 파일을 읽기/쓰기 모드로 연다.(w+ 모드는 기존 내용을 지워버리므로 반드시 r+모드로..)
   // 그러나 r+모드는 화일이 존재하지 않을 경우 화일을 만들지 못하므로 다음과 같이 만들어준다. 
   if ((fp_node = fopen("tree.txt", "r+")) == NULL) {
      fp_node = fopen("tree.txt", "w+");
      fprintf(fp_node, "%3d %2d %2d %2d\n", -1, -1, -1, -1); // 초기화
      fclose(fp_node);
      fprintf(stderr, "tree.txt 화일이 존재하지 않아 새로 만들었습니다.\n");
   }
   while (1) {
      menu();
      rewind(stdin);
      command = getchar();//메뉴 입력

      switch (command) {
      case 'i': //삽입
         insert();
         break;
      case 'd': //삭제
         erase();
         break;
      case 'c':  //수정
         change();
         break;
      case 's':  //검색
         search();
         break;
      case 'p':  //전체 출력
         print();
         break;
      case 'q':  //종료
         return;
      default:  //잘못 입력
         printf("잘못된 번호 입력\n");
         break;
      }
      printf("\n");
   }
   return 0;
}

void insert(){  // 삽입 함수
   int current_adr=0, parent_adr=0, new_adr; // current는 현재 노드, parent는 부모 노드 
   struct TreeNode parent, current = { -1,-1,-1,-1 };
   struct person tmp, pre;
   int link, pre_link, addr, pre_addr = 0;
   parent.key = NULL;

   //파일 열기
   fp_seq = fopen("sequential.txt", "r+");
   fp_node = fopen("tree.txt", "r+");

   //입력 받기
   printf("ID, 이름, 나이를 입력하시오 : ");
   scanf("%d", &per.id);
   if (per.id < 0) return;
   scanf("%s %d", per.name, &per.age);


   //sequential.txt 입력
   fseek(fp_seq, 0, SEEK_SET);
   fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link); // 첫줄을 읽기
   //sequential.txt의 경우, 첫줄의 link값을 해더 포인터처럼 사용하였기 때문에, 첫줄은 000 _____ 000 으로 고정되고 
   //입력 받는 키 값중 가장 작은 키값의 주소를 link로 가리킨다. 첫줄은 link값만 바뀌고 지워지거나, 수정되지 않는다.

   if (link == -1) {//값이 없을 경우
      fseek(fp_seq, 0, SEEK_END);  //텍스트의 마지막으로 포인터를 옮기고
      addr = ftell(fp_seq) / SEQ_BLOCK; //그 포인터의 주소를 받고, SEQ_BLOCK 즉, 텍스트의 1줄의 문자 수로 나누어 행번호를 표시하게끔 한다.
      fprintf(fp_seq, "%03d %5s %03d %02d\n", per.id, per.name, per.age, -1); // 입력받은 값을 텍스트에 쓴다. link는 아무것도 가리키고 있지 않으므로 -1을 입력한다.
      printf("입력하였습니다.\n"); // 입력했다는 문구를 화면에 출력한다.
      fseek(fp_seq, 0 * SEQ_BLOCK + 14, SEEK_SET); // 첫줄의 link 위치로 파일 포인터를 이동시킨다.
      fprintf(fp_seq, "%02d", addr); // 해당 부분을 아까 받은 주소값으로 덮어쓴다.
      fclose(fp_seq); // 파일을 닫는다.
   }
   else {//입력된 값이 있을 경우
      while (1) {
         pre = tmp;
         pre_link = link; // link는 구조체에 구성요소가 아니므로 따로 지정해준다.
         fseek(fp_seq, link*SEQ_BLOCK, SEEK_SET); // 첫줄에서 읽은 위치 즉, 화일에 입력값중 가장 작은 키값을 가진 행으로 이동한다.
         fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link); // 해당 행의 정보를 읽는다.
         if (tmp.id == per.id) { // 만약 같은 id가 존재하면, 중복이라는 문구를 띄어준다.
            printf("이미 존재하는 ID입니다.\n");
            fclose(fp_seq);
            return; //함수 종료
         }// 변수 이름이 비슷하여 헷갈릴 수 있다. pre => previous의 약자로, 이전의 값을 의미한다. per는 입력값이다. tmp는 현재 값이다.(순서상 pre -> tmp)
         if (pre.id < per.id && tmp.id > per.id) { // 입력받은 id값이 순차파일 상 이전 갑보다 크고, 입력값이 현재 참조한 위치의 값보다 작을 경우
            fseek(fp_seq, 0, SEEK_END); // 마지막 줄에
            addr = ftell(fp_seq) / SEQ_BLOCK; // 주소값을 받고
            fprintf(fp_seq, "%03d %5s %03d %02d\n", per.id, per.name, per.age, pre_link); // 텍스트의 해당 위치에 값을 적은 후(tmp의 행 주소를 link한다.)
            printf("입력하였습니다.\n"); 
            fseek(fp_seq, pre_addr*SEQ_BLOCK + 14, SEEK_SET); // 이전 위치의 link 위치로 가서
            fprintf(fp_seq, "%02d", addr); // 받은 주소 값으로 link를 덮어씌어주고,
            fclose(fp_seq);  // 텍스트 파일을 닫는다.
            break;
         }
         if (link == -1) { // 만약 현재 입력하려는 값이 현재 텍스트에 있는 값들보다 큰 값이면
            fseek(fp_seq, 0, SEEK_END); // 마지막 줄로 이동하여
            addr = ftell(fp_seq) / SEQ_BLOCK; // 주소를 받고
            fprintf(fp_seq, "%03d %5s %03d %02d\n", per.id, per.name, per.age, -1); // 해당 위치에 내용을 적고(link는 -1
            printf("입력하였습니다.\n"); 
            fseek(fp_seq, pre_link * SEQ_BLOCK + 14, SEEK_SET);  // 이전 위치로 이동하여
            fprintf(fp_seq, "%02d", addr); // link를 방금 삽입한 주소값으로 덮어쓰고
            fclose(fp_seq); // 텍스트를 종료한다.
            break; //while문을 나간다.
         }
         pre_addr = pre_link; // 이전 주소는 이전의 link값으로 변경시킨다. 
      }
   }

   //다음의 while문은 새로운 노드가 삽입될 부모노드를 찾기 위함이다.
   while (1) {
      fseek(fp_node, NODE_BLOCK * current_adr, SEEK_SET);   //10 = 키 3자리 + 공백1 + 왼쪽 포인터 2 + 공백1 + 오른쪽 2 + CR+LF
      fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);

      if (per.id == current.key) {
         printf("Duplicated Key!\n");
         return; //이미 존재하는 키값이면 종료
      }

      if (per.id < current.key &&  current.left > 0) current_adr = current.left;
      else if (per.id > current.key &&  current.right > 0) current_adr = current.right;
      else break;   //이 것은 leaf노드를 만났단 의미!

   }

   //위에서 찾은 노드를 새로운 노드의 부모 노드로 만든다. 그리고 부모 노드와 링크 연결
   parent_adr = current_adr;
   parent = current;
   if (parent.key != -1)  //부모키값이 -1이라면 아무것도 없는 초기 상태임
   {
      fseek(fp_node, 0, SEEK_END);
      new_adr = ftell(fp_node);   //화일의 맨끝에 삽입하고 이 주소를 부모노드에 넘긴다
      fprintf(fp_node, "%03d %02d %02d %02d\n", per.id, addr, -1, -1); // 최초의 루트 삽입

      if (per.id < parent.key) {
         fseek(fp_node, NODE_BLOCK * parent_adr + 7, SEEK_SET);   //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", (new_adr / NODE_BLOCK));
         balance(0);
      }
      else {
         fseek(fp_node, NODE_BLOCK * parent_adr + 10, SEEK_SET); ;   //6 = 키 2자리 + 공백 1자리 + 왼쪽자식 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", (new_adr / NODE_BLOCK));
         balance(0);
      }
   }
   else {
      fseek(fp_node, 0, SEEK_SET);//        // 최초의 루트 삽입 
      fprintf(fp_node, "%03d %02d %02d %02d\n", per.id, addr, -1, -1); // 최초의 루트 삽입
      printf("root created!\n");
   }

   fclose(fp_node);
}


void search()
{
   int current_adr = 0; // current는 현재 노드
   struct TreeNode current = { -1,-1,-1,-1 };
   struct person tmp = { -1, -1, -1 };
   int lnk;
   current_adr = 0;


   fp_node = fopen("tree.txt", "r+");
   fp_seq = fopen("sequential.txt", "r");

   printf("찾으려는 ID를 입력하시오 : ");
   scanf("%d", &per.id);
   if (per.id < 0) return;

   while (1) {
      fseek(fp_node, NODE_BLOCK * current_adr, SEEK_SET);   //10 = 키 2자리 + 공백1 + 왼쪽 포인터 2 + 공백1 + 오른쪽 2 + CR+LF
      fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);

      if (per.id == current.key) {
         fseek(fp_seq, current.record*SEQ_BLOCK, SEEK_SET);
         fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &lnk);
         printf("이름 : %5s,   나이 : %3d\n", tmp.name, tmp.age);
         fclose(fp_seq);
         fclose(fp_node);
         return;
      }

      if (per.id < current.key &&  current.left > 0) {
         current_adr = current.left;
      }
      else if (per.id > current.key &&  current.right > 0) {
         current_adr = current.right;
      }
      else {
         printf("찾으시는 id가 없습니다. (입력하신 ID : %3d)\n", per.id);
         break;
      }
   }
}

void change() {
   struct person tmp;
   int link, pre_link;

   fp_seq = fopen("sequential.txt", "r+"); // 텍스트를 연다.

   printf("수정할 ID를 입력하시오(나이만 수정할 수 있습니다.) : "); // 값을 입력 받는다.
   scanf("%d", &per.id);
   if (per.id < 0) return;

   fseek(fp_seq, 0, SEEK_SET);
   fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);

   while (1) { 
      pre_link = link;
      fseek(fp_seq, link*SEQ_BLOCK, SEEK_SET);
      fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);
      if (tmp.id == per.id) { //입력한 id와 같은 id를 찾을 경우
         printf("이름 : %s. 현재 입력된 나이 : %d\n", tmp.name, tmp.age);
         printf("수정할 나이를 입력하시오 : "); // 수정하려는 아이를 입력 받은후
         scanf("%d", &per.age);
         fseek(fp_seq, pre_link*SEQ_BLOCK + 10, SEEK_SET); // 나이 부분에 덮어 쓴다.
         fprintf(fp_seq, "%03d", per.age);
         printf("수정했습니다.\n"); // 수정완료 메세지 출력 후
         fclose(fp_seq); // 텍스트를 닫는다.
         break;
      }
      else if (link == -1) {//만약 찾지 못하고, 마지막까지 갔을 경우
         printf("찾으시는 ID가 없습니다.\n");//없다는 메세지 출력후, 텍스트를 닫는다.
         fclose(fp_seq);
         break;
      }
   }
}

void print() {//전체 출력 함수
   struct person tmp;
   int link = 0;
   fp_seq = fopen("sequential.txt", "r"); // 텍스트를 연 후
   fseek(fp_seq, 0 * SEQ_BLOCK, SEEK_SET); // 첫번째 줄을 읽어 link를 통해 순차화일 시작행을 받고
   fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);
   printf("============================================\n");
   do {
      fseek(fp_seq, link*SEQ_BLOCK, SEEK_SET); //해당 행부터 link값으로 다음 행으로 이동하여, 순차적으로 출력해준다.
      fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);
      printf("ID : %3d, 이름 : %5s, 나이 : %3d\n", tmp.id, tmp.name, tmp.age);
   } while (link != -1);
   printf("=============================================\n");
   fclose(fp_seq); // 텍스트를 닫는다.
}

int node_height(int val) //높이 입력을 위한 갱신 함수
{
   struct TreeNode current = { -1,-1,-1,-1 };
   int height = 0;

   fseek(fp_node, NODE_BLOCK * val, SEEK_SET); 
   fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);

   if (current.key != EOF)//값이 없을때 까지 오른쪽 노드와 왼쪽 노드를 재귀적으로 함수를 호출하여
      height = 1 + max(node_height(current.left), node_height(current.right));
   //값 산출 후
   return height;  //값 반환
}

int get_balance(int val) {
   struct TreeNode current = { -1,-1,-1,-1 };
   fseek(fp_node, NODE_BLOCK * val, SEEK_SET);
   fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);
   if (current.key == EOF) {
      printf("get_bal EOF"); 
      return 0;
   }
   return (node_height(current.left) - node_height(current.right));//산출 된 높이를 계산하여, 균형 인수를 반환한다.
}

void balance(int val) {
   int hi_dif = get_balance(val); //균형인수를 반환 받아
   struct TreeNode current = { -1,-1,-1,-1 };
   fseek(fp_node, NODE_BLOCK * val, SEEK_SET); 
   fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);

   if (hi_dif > 1) {//균형인수가 1보다 크고
      if (get_balance(current.left) > 0) {//left밸런스가 0보다 크면 LL회전 함수 호출
         LL(val);
      }
      else {//LR함수 호출
         //LR(val);
      }
   }
   else if (hi_dif < -1) {//균형인수가 -1보다 작고
      if (get_balance(current.right) < 0) // right 밸런스가 음수이면 RR함수 호출
         RR(val);
      else {//dkslaus RL함수 호출
         //RL(val)
      }
   }
}

void erase() {
   int current_adr, parent_adr, new_adr, succ_adr, succ_parent_adr, exist; // current는 현재 노드, parent는 부모 노드 
   int link, pre_link, pre_addr = 0;
   char right_left; //부모의 왼쪽자식인지 오른쪽자식인지를 나타내는 변수
   struct TreeNode parent, current = { -1,-1,-1,-1 };
   struct TreeNode succ, succ_parent = { -1,-1,-1,-1 };    //중위순회를 위한 변수
   struct person tmp, pre;
   current_adr = parent_adr = 0;
   parent.key = NULL;
   //파일 열기
   fp_node = fopen("tree.txt", "r+");
   fp_seq = fopen("sequential.txt", "r+");
   //삭제할 정보 입력받기
   printf("삭제할 ID를 입력하시오 : ");
   scanf("%d", &per.id);
   if (per.id < 0) return;

   //sequential.txt 삭제
   fseek(fp_seq, 0, SEEK_SET);
   fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);

   while (1) {
      pre = tmp;
      pre_link = link;
      fseek(fp_seq, link*SEQ_BLOCK, SEEK_SET);
      fscanf(fp_seq, "%d %s %d %d", &tmp.id, tmp.name, &tmp.age, &link);
      if (tmp.id == per.id) {//삭제할 id랑 현재 id가 같을 경우
         fseek(fp_seq, pre_link*SEQ_BLOCK, SEEK_SET); //현재 위치의 키 값을 -2로 지우기
         fprintf(fp_seq, "%03d", -2);
         fseek(fp_seq, pre_link*SEQ_BLOCK + 14, SEEK_SET);//가리키고 있던 link값을 -1로 초기화하여 link 삭제
         fprintf(fp_seq, "%02d", -1);
         fseek(fp_seq, pre_addr*SEQ_BLOCK + 14, SEEK_SET);//현재 정보를 가리키고 있던 link를 다음 정보를 가리키도록 link 수정
         fprintf(fp_seq, "%02d", link);
         printf("삭제했습니다.\n");//메세지 출력 후 텍스트 닫기
         fclose(fp_seq);
         break;
      }
      else if (link == -1) {
         printf("찾으시는 ID가 없습니다.\n");
         fclose(fp_seq);
         return;
      }
      pre_addr = pre_link;
   }

   //다음의 while문은 삭제될 노드와 그의 부모노드를 찾기 위함이다.
   while (1) {
      fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);   //10 = 키 2자리 + 공백1 + 왼쪽 포인터 2 + 공백1 + 오른쪽 2 + CR+LF
      fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);

      if (per.id == current.key) {
         exist = 1;//이미 존재하는 키값이면 성공표시
         break;
      }
      if (per.id < current.key &&  current.left > 0) {
         parent_adr = current_adr;
         current_adr = current.left;
         right_left = 'L';
      }
      else if (per.id > current.key &&  current.right > 0) {
         parent_adr = current_adr;
         current_adr = current.right;
         right_left = 'R';
      }
      else {
         exist = 0;
         break;   //이 것은 leaf노드를 만났단 의미!
      }

   }

   if (exist == 0) {
      printf("Not Found!\n");
      return;
   }

   fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);
   fscanf(fp_node, "%3d %2d %2d %2d", &current.key, &current.record, &current.left, &current.right);


   //리프노드이면 리프노드의 키값을 -1로 하고 부모노드의 링크를 -1로 해줌
   if (current.left == -1 && current.right == -1) {
      fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);
      fprintf(fp_node, "%03d %2d %2d %2d\n", -1, -1, -1, -1);  //삭제노드의 값을 -1로 채움
      if (right_left == 'L') {
         fseek(fp_node, NODE_BLOCK*parent_adr + 7, SEEK_SET);   //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", -1);
      }
      else {
         fseek(fp_node, NODE_BLOCK*parent_adr + 10, SEEK_SET);    //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", -1);
      }
      fclose(fp_node);
      return;
   }
   // 왼쪽자식만 있는 경우 왼쪽 자식을 부모노드에 연결해줌
   if (current.left > 0 && current.right == -1) {
      fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);
      fprintf(fp_node, "%03d %2d %2d %2d\n", -1, -1, -1, -1);  //삭제노드의 값을 -1로 채움
      if (right_left == 'L') {
         fseek(fp_node, NODE_BLOCK*parent_adr + 7, SEEK_SET);   //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", current.left);
      }
      else {
         fseek(fp_node, NODE_BLOCK*parent_adr + 10, SEEK_SET);    //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", current.left);
      }
      fclose(fp_node);
      return;
   }
   // 오른쪽자식만 있는 경우 오른쪽 자식을 부모노드에 연결해줌
   if (current.left == -1 && current.right > 0) {
      fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);
      fprintf(fp_node, "%03d %2d %2d %2d\n", -1, -1, -1, -1);  //삭제노드의 값을 -1로 채움
      if (right_left == 'L') {
         fseek(fp_node, NODE_BLOCK*parent_adr + 7, SEEK_SET);   //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", current.right);
      }
      else {
         fseek(fp_node, NODE_BLOCK*parent_adr + 10, SEEK_SET);    //3 = 키 2자리 + 공백 1자리
         fprintf(fp_node, "%02d", current.right);
      }
      fclose(fp_node);
      return;
   }
   // 그 외의 경우는 두개의 자식을 가지는 경우이다. 중위순회에 의해 다음 탐색노드(succ)를 찾는다
   // 즉, 오른쪽 자손 중 왼쪽 자식을 가지지 않는 마지막 노드
   succ_adr = current.right;
   succ_parent_adr = current_adr;
   printf("a");
   while (1) {
      fseek(fp_node, NODE_BLOCK*succ_adr, SEEK_SET);
      fscanf(fp_node, "%3d %2d %2d %2d", &succ.key, &succ.record, &succ.left, &succ.right);
      if (succ.left == -1) {
         break;
      }
      succ_parent_adr = succ_adr;
      succ_adr = succ.left;
   }
   printf("b");

   fseek(fp_node, NODE_BLOCK*current_adr, SEEK_SET);
   fprintf(fp_node, "%3d", succ.key);  //삭제노드의 값을 승계자(succ)값으로 바꿈

                               //승계노드가 삭제 노드의 직속 오른쪽자식인 경우(승계노드가 부모노드의 오른쪽 자식)
                               //그렇지 않은 경우로 분리(승계노드가 부모노드의 왼쪽 자식)

   if (succ_parent_adr == current_adr) {
      fseek(fp_node, NODE_BLOCK*current_adr + 10, SEEK_SET);
      fprintf(fp_node, "%02d", succ.right);
   }
   else {
      fseek(fp_node, NODE_BLOCK*succ_parent_adr + 7, SEEK_SET);
      fprintf(fp_node, "%02d", succ.right);  //승계 부모노드의 왼쪽자식을 을 승계노드의 오른쪽 자식으로 바꿈
   }

   fseek(fp_node, NODE_BLOCK*succ_adr, SEEK_SET);
   fprintf(fp_node, "%03d %2d %2d %2d\n", -1, -1, -1, -1);  //승계노드가 있던 자리는  -1로 채워 삭제표시
   fclose(fp_node);
}

void LL(int val) {//미완성, 트리의 루트 회전만 가능
   struct TreeNode parent, child = { -1,-1,-1,-1 };
   int tmp;

   fseek(fp_node, NODE_BLOCK * val, SEEK_SET);
   fscanf(fp_node, "%3d %2d %2d %2d", &parent.key, &parent.record, &parent.left, &parent.right);

   tmp = parent.left; //Node child = parent->left;

   fseek(fp_node, NODE_BLOCK * tmp, SEEK_SET);
   fscanf(fp_node, "%3d %2d %2d %2d", &child.key, &child.record, &child.left, &child.right);

   parent.left = child.right; // parent->left = child->right;
   child.right = tmp;  // child->right = parent;

   fseek(fp_node, NODE_BLOCK*val, SEEK_SET);
   fprintf(fp_node, "%03d %02d %02d %02d", child.key, child.record, child.left, child.right);
   fseek(fp_node, NODE_BLOCK*tmp, SEEK_SET);
   fprintf(fp_node, "%03d %02d %02d %02d", parent.key, parent.record, parent.left, parent.right);

}

void RR(int val) {//미완성, 트리의 루트 회전만 가능
   struct TreeNode parent, child = { -1,-1,-1,-1 };
   int tmp;

   fseek(fp_node, NODE_BLOCK * val, SEEK_SET);
   fscanf(fp_node, "%3d %2d %2d %2d", &parent.key, &parent.record, &parent.left, &parent.right);

   tmp = parent.right; //Node child = parent->right

   fseek(fp_node, NODE_BLOCK * tmp, SEEK_SET); 
   fscanf(fp_node, "%3d %2d %2d %2d", &child.key, &child.record, &child.left, &child.right);

   parent.right = child.left;  // parent->right = child->left;
   child.left = tmp; //child->left = parent;

   fseek(fp_node, NODE_BLOCK*val, SEEK_SET);
   fprintf(fp_node, "%03d %02d %02d %02d", child.key, child.record, child.left, child.right);
   fseek(fp_node, NODE_BLOCK*tmp, SEEK_SET);
   fprintf(fp_node, "%03d %02d %02d %02d", parent.key, parent.record, parent.left, parent.right);
}

void menu()
{
   printf("**************\n");
   printf("i: 입력\n");
   printf("d: 삭제\n");
   printf("s: 탐색\n");
   printf("c: 나이 수정\n");
   printf("p: 전체 출력\n");
   printf("q: 종료\n");
   printf("**************    >>  ");
}